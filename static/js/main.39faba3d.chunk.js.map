{"version":3,"sources":["ui/Card.tsx","App.tsx","Root.tsx","index.tsx"],"names":["Card","styled","Flex","borders","color","background","Center","div","useNumber","initialValue","useState","text","setText","value","setValue","e","target","valueNumber","parseFloat","Number","isNaN","App","sizeText","setSizeText","size","xRangeText","setXRangeText","xRange","lineWidthText","setLineWidthText","lineWidth","refresh","forceUpdate","count","useForceUpdate","enableArea","setEnableArea","enablePoints","setEnablePoints","enableGridX","setEnableGridX","enableGridY","setEnableGridY","axisBottomLegend","setAxisBottomLegend","axisLeftLegend","setAxisLeftLegend","label","distribution","setDistribution","lambdaText","setLambdaText","lambda","muText","setMuText","mu","sigmaText","setSigmaText","sigma","qyy","useMemo","distributionFn","d3","fnFromDistribution","args","getDistributionParams","qy","Float64Array","from","length","sort","slice","call","series","id","data","map","v","i","x","y","yScale","Math","min","type","max","reverse","axisBottom","orient","legend","legendOffset","legendPosition","tickValues","axisLeft","tickSize","tickPadding","tickRotation","flexDirection","width","height","flex","margin","top","right","bottom","left","xScale","colors","scheme","axisTop","axisRight","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","pointLabel","pointLabelYOffset","useMesh","Autocomplete","options","onChange","event","blurOnSelect","disableClearable","openOnFocus","style","getOptionLabel","option","getOptionSelected","renderInput","params","TextField","variant","fullWidth","mt","FormControlLabel","control","Checkbox","checked","name","Button","onClick","createMuiTheme","GlobalStyle","createGlobalStyle","Root","StylesProvider","injectFirst","CssBaseline","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39faba3d.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Flex } from 'rebass';\nimport { background, borders, color, flexbox } from 'styled-system';\n\nexport const Card = styled(Flex)`\n  ${borders}\n  ${color}\n  ${background} \n`;\n","import React, { useState, useMemo } from 'react';\nimport { Flex, Text } from 'rebass';\nimport styled from 'styled-components';\nimport { ResponsiveLine } from '@nivo/line';\nimport * as d3 from 'd3';\nimport { TextField, Button, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { Card } from './ui/Card';\nimport { Autocomplete } from '@material-ui/lab';\n\nconst Center = styled.div`\n  display: grid;\n  flex: 1;\n  place-items: center;\n  height: 100vh;\n`;\n\nconst useNumber = (initialValue) => {\n  const [text, setText] = useState(initialValue);\n  const [value, setValue] = useState(initialValue);\n\n  const setSafeNumber = (e) => {\n    const value = e.target.value;\n\n    setText(value);\n\n    const valueNumber = parseFloat(value);\n\n    if (!Number.isNaN(valueNumber) && valueNumber !== 0) {\n      setValue(valueNumber);\n    }\n  }\n\n  return [\n    text,\n    setSafeNumber,\n    value,\n  ];\n}\n\nconst useForceUpdate = () => {\n  const [refresh, forceUpdate] = useState(0);\n\n  const update = () => {\n    forceUpdate(count => count + 1);\n  }\n\n  return [update, refresh];\n}\n\nconst App = () => {\n  const [sizeText, setSizeText, size] = useNumber(100);\n  const [xRangeText, setXRangeText, xRange] = useNumber(4);\n  const [lineWidthText, setLineWidthText, lineWidth] = useNumber(0);\n  const [forceUpdate, refresh] = useForceUpdate();\n  const [enableArea, setEnableArea] = useState<boolean>(true);\n  const [enablePoints, setEnablePoints] = useState<boolean>(false);\n  const [enableGridX, setEnableGridX] = useState<boolean>(false);\n  const [enableGridY, setEnableGridY] = useState<boolean>(true);\n  const [axisBottomLegend, setAxisBottomLegend] = useState('Time');\n  const [axisLeftLegend, setAxisLeftLegend] = useState('Count');\n  const [distribution, setDistribution] = useState({\n    value: 'Exponential',\n    label: 'Exponential',\n  });\n\n  const [lambdaText, setLambdaText, lambda] = useNumber(1);\n  const [muText, setMuText, mu] = useNumber(0);\n  const [sigmaText, setSigmaText, sigma] = useNumber(1);\n\n  const DISTRIBUTION_OPTIONS = [\n    {\n      value: 'Exponential',\n      label: 'Exponential',\n    },\n    {\n      value: 'LogNormal',\n      label: 'LogNormal',\n    },\n  ];\n\n  const fnFromDistribution = () => {\n    switch(distribution.value) {\n      case 'Exponential':\n        return d3.randomExponential;\n      case 'LogNormal':\n        return d3.randomLogNormal;\n      default:\n        return d3.randomExponential;\n    }\n  }\n\n  const getDistributionParams = () => {\n    switch(distribution.value) {\n      case 'Exponential':\n        return [lambda];\n      case 'LogNormal':\n        return [mu, sigma];\n      default:\n        return [lambda];\n    }\n  }\n\n  const renderDistributionParams = () => {\n    if (distribution.value === 'Exponential') {\n      return (\n        <TextField\n          label='lambda'\n          value={lambdaText}\n          onChange={setLambdaText}\n        />\n      )\n    }\n\n    if (distribution.value === 'LogNormal') {\n      return (\n        <>\n          <TextField\n            label='mu'\n            value={muText}\n            onChange={setMuText}\n          />\n          <TextField\n            label='sigma'\n            value={sigmaText}\n            onChange={setSigmaText}\n          />\n        </>\n      )\n    }\n  }\n\n  const qyy = useMemo(() => {\n    const distributionFn = fnFromDistribution();\n    const args = getDistributionParams();\n    const exponentialData = Float64Array.from({length: size}, distributionFn(...args));\n\n    const qy = exponentialData.sort(d3.ascending);\n    return [].slice.call(qy);\n  }, [size, refresh, distribution.value, lambda, mu, sigma]);\n\n  const series = useMemo(() => {\n    const data = qyy.map((v,i) => {\n      return {\n        x: i * xRange/size,\n        y: v,\n      }\n    });\n\n    return [\n      {\n        id: 'data',\n        data,\n      }\n    ];\n  }, [qyy, xRange]);\n\n  const margin = {\n    top: 50, right: 110, bottom: 50, left: 60\n  };\n\n  const xScale = {\n    type: 'point'\n  };\n\n  const min = Math.min(...qyy);\n  const max = Math.max(...qyy);\n\n  const yScale = {\n    type: 'linear',\n    min: 0,\n    max: max + 1,\n    reverse: false\n  };\n\n  const colors = {\n    scheme: 'category10'\n  };\n\n  const axisBottom = {\n    orient: 'bottom',\n    legend: axisBottomLegend,\n    legendOffset: 36,\n    legendPosition: 'middle',\n    tickValues: [0, 1, 2 , 3, 4],\n  };\n\n  const axisLeft= {\n    orient: 'left',\n    tickSize: 5,\n    tickPadding: 5,\n    tickRotation: 0,\n    tickValues: 5,\n    legend: axisLeftLegend,\n    legendOffset: -40,\n    legendPosition: 'middle'\n  }\n\n  return (\n    <Center>\n      <Flex flexDirection='row'>\n        <Flex width='800px' height='400px' flex={1}>\n          <ResponsiveLine\n            data={series}\n            margin={margin}\n            xScale={xScale}\n            yScale={yScale}\n            colors={colors}\n            lineWidth={lineWidth}\n            axisTop={null}\n            axisRight={null}\n            axisBottom={axisBottom}\n            axisLeft={axisLeft}\n            pointSize={10}\n            pointColor={{ theme: 'background' }}\n            pointBorderWidth={2}\n            pointBorderColor={{ from: 'serieColor' }}\n            pointLabel=\"y\"\n            pointLabelYOffset={-12}\n            useMesh={false}\n            enableArea={enableArea}\n            enablePoints={enablePoints}\n            enableGridX={enableGridX}\n            enableGridY={enableGridY}\n          />\n        </Flex>\n        <Card flexDirection='column'>\n          <Text>Distribution</Text>\n          <Autocomplete\n            options={DISTRIBUTION_OPTIONS}\n            value={distribution}\n            onChange={(event, value) => setDistribution(value)}\n            blurOnSelect={true}\n            disableClearable={true}\n            openOnFocus={true}\n            style={{ width: '100%' }}\n            getOptionLabel={(option) => option.label}\n            getOptionSelected={(option, value) => option?.value === value?.value || option?.value === value}\n            renderInput={(params) => {\n              return <TextField {...params} variant='standard' label={'Distribution'} fullWidth />;\n            }}\n          />\n          {renderDistributionParams()}\n          <TextField\n            label='size'\n            value={sizeText}\n            onChange={setSizeText}\n          />\n          <TextField\n            label='xRange'\n            value={xRangeText}\n            onChange={setXRangeText}\n          />\n          <Text mt='10px'>Legend</Text>\n          <TextField\n            label='Axis Bottom'\n            value={axisBottomLegend}\n            onChange={(e) => setAxisBottomLegend(e.target.value)}\n          />\n          <TextField\n            label='Axis Left'\n            value={axisLeftLegend}\n            onChange={(e) => setAxisLeftLegend(e.target.value)}\n          />\n          <Text mt='10px'>Chart</Text>\n          <FormControlLabel\n            control={<Checkbox checked={enableArea} onChange={(e) => setEnableArea(e.target.checked)} name=\"enableArea\" />}\n            label=\"enableArea\"\n          />\n          <FormControlLabel\n            control={<Checkbox checked={enablePoints} onChange={(e) => setEnablePoints(e.target.checked)} name=\"enableArea\" />}\n            label=\"enablePoints\"\n          />\n          <FormControlLabel\n            control={<Checkbox checked={enableGridX} onChange={(e) => setEnableGridX(e.target.checked)} name=\"enableArea\" />}\n            label=\"gridX\"\n          />\n          <FormControlLabel\n            control={<Checkbox checked={enableGridY} onChange={(e) => setEnableGridY(e.target.checked)} name=\"enableArea\" />}\n            label=\"gridY\"\n          />\n          <TextField\n            label='lineWidth'\n            value={lineWidthText}\n            onChange={setLineWidthText}\n          />\n          <Button onClick={forceUpdate}>\n            Refresh\n          </Button>\n        </Card>\n      </Flex>\n    </Center>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {\n  createMuiTheme,\n} from '@material-ui/core/styles';\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport { StylesProvider, ThemeProvider as MuiThemeProvider, } from '@material-ui/styles';\nimport App from './App';\n\nconst theme = createMuiTheme();\n\nconst GlobalStyle = createGlobalStyle``;\n\nconst Root = () => {\n  return (\n    <StylesProvider injectFirst>\n      <MuiThemeProvider theme={theme}>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <GlobalStyle />\n          <App />\n        </ThemeProvider>\n      </MuiThemeProvider>\n    </StylesProvider>\n  );\n};\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './Root';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}