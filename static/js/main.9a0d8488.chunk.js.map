{"version":3,"sources":["ui/Card.tsx","App.tsx","Root.tsx","index.tsx"],"names":["Card","styled","Flex","borders","color","background","Center","div","useNumberQueryParam","queryParamName","initialValue","useQueryParam","withDefault","NumberParam","value","setValue","useState","text","setText","e","target","valueNumber","parseFloat","Number","isNaN","App","sizeText","setSizeText","size","xRangeText","setXRangeText","xRange","lineWidthText","setLineWidthText","lineWidth","refresh","forceUpdate","count","useForceUpdate","BooleanParam","enableArea","setEnableArea","enablePoints","setEnablePoints","enableGridX","setEnableGridX","enableGridY","setEnableGridY","StringParam","axisBottomLegend","setAxisBottomLegend","axisLeftLegend","setAxisLeftLegend","JsonParam","label","distribution","setDistribution","lambdaText","setLambdaText","lambda","muText","setMuText","mu","sigmaText","setSigmaText","sigma","fnFromDistribution","d3","getDistributionParams","qyy","useMemo","distributionFn","args","qy","Float64Array","from","length","sort","slice","call","series","id","data","map","v","i","x","y","yScale","Math","min","type","max","reverse","axisBottom","orient","legend","legendOffset","legendPosition","tickValues","axisLeft","tickSize","tickPadding","tickRotation","flexDirection","width","height","flex","margin","top","right","bottom","left","xScale","colors","scheme","axisTop","axisRight","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","pointLabel","pointLabelYOffset","useMesh","Autocomplete","options","onChange","event","blurOnSelect","disableClearable","openOnFocus","style","getOptionLabel","option","getOptionSelected","renderInput","params","TextField","variant","fullWidth","mt","FormControlLabel","control","Checkbox","checked","name","Button","onClick","createMuiTheme","GlobalStyle","createGlobalStyle","Root","StylesProvider","injectFirst","CssBaseline","ReactDOM","render","ReactRouterRoute","Route","document","getElementById"],"mappings":"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","file":"static/js/main.9a0d8488.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Flex } from 'rebass';\nimport { background, borders, color, flexbox } from 'styled-system';\n\nexport const Card = styled(Flex)`\n  ${borders}\n  ${color}\n  ${background} \n`;\n","import React, { useState, useMemo } from 'react';\nimport { Flex, Text } from 'rebass';\nimport styled from 'styled-components';\nimport { ResponsiveLine } from '@nivo/line';\nimport * as d3 from 'd3';\nimport {\n  TextField,\n  Button,\n  FormControlLabel,\n  Checkbox,\n} from '@material-ui/core';\nimport { Card } from './ui/Card';\nimport { Autocomplete } from '@material-ui/lab';\nimport {\n  useQueryParam,\n  StringParam,\n  BooleanParam,\n  withDefault,\n  JsonParam,\n  NumberParam,\n} from 'use-query-params';\n\nconst Center = styled.div`\n  display: grid;\n  flex: 1;\n  place-items: center;\n  height: 100vh;\n`;\n\nconst useNumberQueryParam = (queryParamName, initialValue) => {\n  const [value, setValue] = useQueryParam(\n    queryParamName,\n    withDefault(NumberParam, initialValue),\n  );\n  const [text, setText] = useState(value);\n\n  const setSafeNumber = (e) => {\n    const value = e.target.value;\n\n    setText(value);\n\n    const valueNumber = parseFloat(value);\n\n    if (!Number.isNaN(valueNumber) && valueNumber !== 0) {\n      setValue(valueNumber);\n    }\n  };\n\n  return [text, setSafeNumber, value];\n};\n\nconst useForceUpdate = () => {\n  const [refresh, forceUpdate] = useState(0);\n\n  const update = () => {\n    forceUpdate((count) => count + 1);\n  };\n\n  return [update, refresh];\n};\n\nconst App = () => {\n  const [sizeText, setSizeText, size] = useNumberQueryParam('size', 100);\n  const [xRangeText, setXRangeText, xRange] = useNumberQueryParam('xRange', 4);\n  const [lineWidthText, setLineWidthText, lineWidth] = useNumberQueryParam(\n    'lineWidth',\n    0,\n  );\n  const [forceUpdate, refresh] = useForceUpdate();\n  const [enableArea, setEnableArea] = useQueryParam<boolean>(\n    'enableArea',\n    withDefault(BooleanParam, true),\n  );\n  const [enablePoints, setEnablePoints] = useQueryParam<boolean>(\n    'enablePoints',\n    withDefault(BooleanParam, false),\n  );\n  const [enableGridX, setEnableGridX] = useQueryParam<boolean>(\n    'enableGridX',\n    withDefault(BooleanParam, false),\n  );\n  const [enableGridY, setEnableGridY] = useQueryParam<boolean>(\n    'enableGridY',\n    withDefault(BooleanParam, true),\n  );\n  const [axisBottomLegend, setAxisBottomLegend] = useQueryParam<string>(\n    'axisBottomLegend',\n    withDefault(StringParam, 'Time'),\n  );\n  const [axisLeftLegend, setAxisLeftLegend] = useQueryParam<string>(\n    'axisLeftLegend',\n    withDefault(StringParam, 'Count'),\n  );\n  const [distribution, setDistribution] = useQueryParam(\n    'distribution',\n    withDefault(JsonParam, {\n      value: 'Exponential',\n      label: 'Exponential',\n    }),\n  );\n\n  const [lambdaText, setLambdaText, lambda] = useNumberQueryParam('lambda', 1);\n  const [muText, setMuText, mu] = useNumberQueryParam('mu', 0);\n  const [sigmaText, setSigmaText, sigma] = useNumberQueryParam('sigma', 1);\n\n  const DISTRIBUTION_OPTIONS = [\n    {\n      value: 'Exponential',\n      label: 'Exponential',\n    },\n    {\n      value: 'LogNormal',\n      label: 'LogNormal',\n    },\n  ];\n\n  const fnFromDistribution = () => {\n    switch (distribution.value) {\n      case 'Exponential':\n        return d3.randomExponential;\n      case 'LogNormal':\n        return d3.randomLogNormal;\n      default:\n        return d3.randomExponential;\n    }\n  };\n\n  const getDistributionParams = () => {\n    switch (distribution.value) {\n      case 'Exponential':\n        return [lambda];\n      case 'LogNormal':\n        return [mu, sigma];\n      default:\n        return [lambda];\n    }\n  };\n\n  const renderDistributionParams = () => {\n    if (distribution.value === 'Exponential') {\n      return (\n        <TextField label=\"lambda\" value={lambdaText} onChange={setLambdaText} />\n      );\n    }\n\n    if (distribution.value === 'LogNormal') {\n      return (\n        <>\n          <TextField label=\"mu\" value={muText} onChange={setMuText} />\n          <TextField label=\"sigma\" value={sigmaText} onChange={setSigmaText} />\n        </>\n      );\n    }\n  };\n\n  const qyy = useMemo(() => {\n    const distributionFn = fnFromDistribution();\n    const args = getDistributionParams();\n    const exponentialData = Float64Array.from(\n      { length: size },\n      distributionFn(...args),\n    );\n\n    const qy = exponentialData.sort(d3.ascending);\n    return [].slice.call(qy);\n  }, [fnFromDistribution, getDistributionParams, size]);\n\n  const series = useMemo(() => {\n    const data = qyy.map((v, i) => {\n      return {\n        x: (i * xRange) / size,\n        y: v,\n      };\n    });\n\n    return [\n      {\n        id: 'data',\n        data,\n      },\n    ];\n  }, [qyy, size, xRange]);\n\n  const margin = {\n    top: 50,\n    right: 110,\n    bottom: 50,\n    left: 60,\n  };\n\n  const xScale = {\n    type: 'point',\n  };\n\n  const min = Math.min(...qyy);\n  const max = Math.max(...qyy);\n\n  const yScale = {\n    type: 'linear',\n    min: 0,\n    max: max + 1,\n    reverse: false,\n  };\n\n  const colors = {\n    scheme: 'category10',\n  };\n\n  const axisBottom = {\n    orient: 'bottom',\n    legend: axisBottomLegend,\n    legendOffset: 36,\n    legendPosition: 'middle',\n    tickValues: [0, 1, 2, 3, 4],\n  };\n\n  const axisLeft = {\n    orient: 'left',\n    tickSize: 5,\n    tickPadding: 5,\n    tickRotation: 0,\n    tickValues: 5,\n    legend: axisLeftLegend,\n    legendOffset: -40,\n    legendPosition: 'middle',\n  };\n  return (\n    <Center>\n      <Flex flexDirection=\"row\">\n        <Flex width=\"800px\" height=\"400px\" flex={1}>\n          <ResponsiveLine\n            data={series}\n            margin={margin}\n            xScale={xScale}\n            yScale={yScale}\n            colors={colors}\n            lineWidth={lineWidth}\n            axisTop={null}\n            axisRight={null}\n            axisBottom={axisBottom}\n            axisLeft={axisLeft}\n            pointSize={10}\n            pointColor={{ theme: 'background' }}\n            pointBorderWidth={2}\n            pointBorderColor={{ from: 'serieColor' }}\n            pointLabel=\"y\"\n            pointLabelYOffset={-12}\n            useMesh={false}\n            enableArea={enableArea}\n            enablePoints={enablePoints}\n            enableGridX={enableGridX}\n            enableGridY={enableGridY}\n          />\n        </Flex>\n        <Card flexDirection=\"column\">\n          <Text>Distribution</Text>\n          <Autocomplete\n            options={DISTRIBUTION_OPTIONS}\n            value={distribution}\n            onChange={(event, value) => setDistribution(value)}\n            blurOnSelect={true}\n            disableClearable={true}\n            openOnFocus={true}\n            style={{ width: '100%' }}\n            getOptionLabel={(option) => option.label}\n            getOptionSelected={(option, value) =>\n              option?.value === value?.value || option?.value === value\n            }\n            renderInput={(params) => {\n              return (\n                <TextField\n                  {...params}\n                  variant=\"standard\"\n                  label={'Distribution'}\n                  fullWidth\n                />\n              );\n            }}\n          />\n          {renderDistributionParams()}\n          <TextField label=\"size\" value={sizeText} onChange={setSizeText} />\n          <TextField\n            label=\"xRange\"\n            value={xRangeText}\n            onChange={setXRangeText}\n          />\n          <Text mt=\"10px\">Legend</Text>\n          <TextField\n            label=\"Axis Bottom\"\n            value={axisBottomLegend}\n            onChange={(e) => setAxisBottomLegend(e.target.value)}\n          />\n          <TextField\n            label=\"Axis Left\"\n            value={axisLeftLegend}\n            onChange={(e) => setAxisLeftLegend(e.target.value)}\n          />\n          <Text mt=\"10px\">Chart</Text>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={enableArea}\n                onChange={(e) => setEnableArea(e.target.checked)}\n                name=\"enableArea\"\n              />\n            }\n            label=\"enableArea\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={enablePoints}\n                onChange={(e) => setEnablePoints(e.target.checked)}\n                name=\"enableArea\"\n              />\n            }\n            label=\"enablePoints\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={enableGridX}\n                onChange={(e) => setEnableGridX(e.target.checked)}\n                name=\"enableArea\"\n              />\n            }\n            label=\"gridX\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={enableGridY}\n                onChange={(e) => setEnableGridY(e.target.checked)}\n                name=\"enableArea\"\n              />\n            }\n            label=\"gridY\"\n          />\n          <TextField\n            label=\"lineWidth\"\n            value={lineWidthText}\n            onChange={setLineWidthText}\n          />\n          <Button onClick={forceUpdate}>Refresh</Button>\n        </Card>\n      </Flex>\n    </Center>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {\n  createMuiTheme,\n} from '@material-ui/core/styles';\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport { StylesProvider, ThemeProvider as MuiThemeProvider, } from '@material-ui/styles';\nimport App from './App';\n\nconst theme = createMuiTheme();\n\nconst GlobalStyle = createGlobalStyle``;\n\nconst Root = () => {\n  return (\n    <StylesProvider injectFirst>\n      <MuiThemeProvider theme={theme}>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <GlobalStyle />\n          <App />\n        </ThemeProvider>\n      </MuiThemeProvider>\n    </StylesProvider>\n  );\n};\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './Root';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { QueryParamProvider } from 'use-query-params';\n\nReactDOM.render(\n  <Router>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <Root />\n    </QueryParamProvider>\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}